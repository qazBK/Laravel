\
BASKET's
 - id
 - Customer

ITEM's
 - ID
 - TITLE
 - PRICE
 - AMOUNT
 - BASKET_ID

== Создание моделей ==
1. Создаем BASKET - таблицу в виде модели
php artisan make:model Basket --migration

Будет создано 2 файла - Модели и Миграции
Идем в Миграцию и там прописываем все поля
            $table->id();
            $table->string('Customer'); - Добавляем это поле
            $table->timestamps();

Делаем Миграцию чтобы наша таблица создалась
Выполняем:
php artisan migrate
Создается таблица в базе данных...

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! Если нужно будет откать то вот:
!! php artisan migrate:rollback --step=1
!!
!! Если нужно вообще все сломать - откатить то 
!! php artisan migrate:reset
!! затем 
!! php artisan migrate
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

== Создание Контроллера для вывода списка Basket ==
php artisan make:controller BasketController
Контроллер нужен чтобы выводить список Basket 
и потом выводить содержимое конкретного Basket по ID

Создаем 2 метода 
   public function index()  - Список всех Basket
   public function detail($id)  - Вывод деталей определеного Basket и его содержимое

== Создаем пути в Routes web.php ====
Route::get('/basket/{id}', [\App\Http\Controllers\BasketController::class, 'detail'])->name('basket.detail');
Route::get('/basket', [\App\Http\Controllers\BasketController::class, 'index'])->name('basket');

== Создание View для Контроллера == 
php artisan make:view BasketIndex
Создаем шаблона = View и сейчас прописываем в BasketController - вызов этих View
    public function index()
    {
        $list = \App\Models\Basket::all();
        return view("BasketIndex", ["list" => $list]);        
    }

== Заполняем данными таблицу Baskets через редактор базы данных ==
DB.Browser.for.SQLite-v3.13.0-win64 запускаем DB Browser for SQLite
и находим файл в проекте \database\database.sqlite
Правим таблицу (добавляем запись) - Обязательно закрываем базу данных

Возвращаемся в проект и делаем View для вывода списка 
\resources\views\BasketDetail.blade.php
Пишем во View и проверяем что выводится что-то
@foreach ($list as $row)
      {{$row->Customer}} <br>
@endforeach

запускаем
php artisan serve 
и проверяем http://127.0.0.1:8000/basket
Должно появится что добавляли в таблицу Basket

== Создание модели Item ===

Создаем Item - таблицу в виде модели
php artisan make:model Item --migration

Будет создано 2 файла - Модели и Миграции
Идем в Миграцию и там прописываем все поля
            $table->id();
            $table->string('Title');
            $table->float('Price');
            $table->float('Amount');
            $table->integer('Basket_id');
            $table->foreign('Basket_id')->references('id')->on('Basket'); //Колонка связи...
            $table->timestamps();

Делаем Миграцию чтобы наша таблица создалась
Выполняем:
php artisan migrate
Создается таблица в базе данных...

В app\Models\Item.php
В контроллере добавить метод обработки связи полей Basket()

    public function Basket()
    {
        return $this->belongsTo(\App\Models\Basket::class, 'Basket_id');
    } 


Создаем View BasketDetail
php artisan make:view BasketDetail

И в контроллере прописываем выборку Item по BASKET_ID

    public function detail($id)
    {

        $list = \App\Models\Item::where('Basket_id',$id)->get();
        return view("BasketDetail", ["list" => $list]);        
    }

Во View resources\views\BasketDetail.blade.php пишем:

@foreach ($list as $row)
      {{$row->Title}}
      Price: {{$row->Price}}
      Amount: {{$row->Amount}} <br>
@endforeach

Запускаем php artisan serve  
Проверяем http://127.0.0.1:8000/basket/1
Номер 1 - это номер Basket которую смотрим...


Добавить в модель связь BASKET с ITEM чтобы я из BASKET мог смотреть что заказано

    public function items()
    {
        return $this->hasMany(Item::class);
    } 


Идем в database\seeders\DatabaseSeeder.php
Генерация корзин и товаров для примера

В run добавляем 
 public function run(): void
    {
        User::factory()->create([
            'name' => 'MaxZ',
            'email' => 'm@maxz.ru',
            'password' => Hash::make('123'),
        ]);
        

        Basket::factory()
        ->count(20)
        ->has(ITEM::factory()->count(3))
        ->create();
    }

Создаем 2 фабрики 

 php artisan make:factory BasketFactory
 php artisan make:factory ItemFactory
 
 В эти фабрики прописывем как заполнять поля для случайных данных
 В database\factories\BasketFactory.php

   public function definition(): array
    {
        return [
            'Customer' => $this->faker->name(), //Имя любое
        ];
    }


 В database\factories\ItemFactory.php

     public function definition(): array
    {
        return [
            'Title' => $this->faker->text(100),
            'Price' => $this->faker->randomNumber(3),
            'Amount' => $this->faker->randomNumber(2),
        ];

    }


Засеиваем базу данных        

Метод без стирания данных - но нельзя дубли (например users)
php artisan db:seed

Метод со стиранием и засеиванием
php artisan migrate:fresh --seed



Новые 3 таблицы 
Region
    - id
    - Title
City
    - id
    - Title
    - Region_id

Street
    - id
    - Title
    - City_id


Таблица 1: Области

ID	Область
1	Свердловская
2	Тюменская
3	Челябинская

Таблица 2: Города

ID	Город	Область ID
1	Екатеринбург	1
2	Нижний Тагил	1
3	Тюмень	        2
4	Тобольск        2
5	Челябинск	    3

Таблица 3: Улицы

ID	Улица	Город ID
1	Ленина	        1
2	Малышева	    1
3	Карла Маркса	2
4	Победы	        2
5	Республики	    3
6	Дзержинского	3
7	Ленина	        4
8	Октябрьская	    4
9	Ленина	        5
10	Комсомольская	5

php artisan make:model Region --migration

        Schema::create('regions', function (Blueprint $table) {
            $table->id();
            $table->string('Title');
            $table->timestamps();
        });

php artisan make:model City --migration
        
        Schema::create('cities', function (Blueprint $table) {
            $table->id();
            $table->string('Title');
            $table->integer('Region_id');
            $table->foreign('Region_id')->references('id')->on('regions'); //Колонка связи...
            $table->timestamps();
        });

php artisan make:model Street --migration

        Schema::create('streets', function (Blueprint $table) {
            $table->id();
            $table->string('Title');
            $table->integer('City_id');
            $table->foreign('City_id')->references('id')->on('cities'); //Колонка связи...
            $table->timestamps();
        });


php artisan migrate:fresh --seed

В Моделях настроить связи должно быть так:

app\Models\Region.php - 
Добавить 
    public function City()
    {
        //use use app\Models\City;
        return $this->hasMany(City::class);
    }     

app\Models\City.php

    public function Street()
    {
        return $this->hasMany(\App\Models\Street::class);
    }     

    public function Region()
    {
        return $this->belongsTo(\App\Models\Region::class, 'Region_id');
    } 

app\Models\Street.php

    public function City()
    {
        return $this->belongsTo(\App\Models\City::class, 'City_id');
    } 



php artisan make:controller StreetController
Файл app\Http\Controllers\StreetController.php
    public function index()
    {

        //$list = \App\Models\Street::all();
        $list = \App\Models\Street::with('City')->get();

        return view("StreetView", ["list" => $list]);
    }



php artisan make:view StreetView
Файл: resources\views\StreetView.blade.php
В самом "view" показываем данные городов и Регионов.
@foreach ($list as $row)
      {{$row->Title}}
      {{$row->City->Title}}
      {{$row->City->Region->Title}} <br>
@endforeach

Чтобы посмотреть по адресу http://127.0.0.1:8000/street
Правим routes\web.php

Добавить 
Route::get('/street', [\App\Http\Controllers\StreetController::class, 'index'])->name('Street');

Проверяем 
php artisan serve
Переходим на http://127.0.0.1:8000/street




//Новый компонент LiveWire

php artisan make:livewire StreetForm

Создается 2 файла
app\Livewire\StreetForm.php
resources\views\livewire\street-form.blade.php

Добавим вывод компонента 
В resources\views\welcome.blade.php
@livewire('StreetForm');


В app\Livewire\StreetForm.php
Создаем публичную переменную
    public $title;

и меняем при рендеринге ...
    public function render()
    {
        $this->title = "Привет";        
        return view('livewire.street-form');
    }

в resources\views\livewire\street-form.blade.php
  
    {{$title}}



Чтобы создать новый проект нужно:
1. Скачать Composer https://getcomposer.org/

php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === 'dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

Появится composer.phar

2. Скачать установщик Laravel
php composer.phar global require laravel/installer

3. Запустить создание нового проекта Laravel имя проекта example-app5
php composer.phar create-project laravel/laravel example-app5

4. Перейти в папку проекта example-app5
cd example-app5

5. Старт 
php artisan serve 


Для livewire нужно:
composer require livewire/livewire

//Новый компонент LiveWire

php artisan make:livewire ToDo

Создается 2 файла
CLASS: app/Livewire//ToDo.php
VIEW:  resources\views/livewire/to-do.blade.php

Добавим вывод компонента 
В resources\views\welcome.blade.php
@livewire('ToDo');


В app\Livewire\ToDo.php
Создаем публичную переменную
    public $title;

и меняем при рендеринге ...
    public function render()
    {
        $this->title = "Привет";        
        return view('livewire.to-do');
    }

в resources\views\livewire\to-do.blade.php
  
    {{$title}}
